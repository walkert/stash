// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stash.proto

package stashproto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Payload struct {
	Password             []byte   `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Payload) Reset()         { *m = Payload{} }
func (m *Payload) String() string { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()    {}
func (*Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor_b21642789e59141a, []int{0}
}

func (m *Payload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Payload.Unmarshal(m, b)
}
func (m *Payload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Payload.Marshal(b, m, deterministic)
}
func (m *Payload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payload.Merge(m, src)
}
func (m *Payload) XXX_Size() int {
	return xxx_messageInfo_Payload.Size(m)
}
func (m *Payload) XXX_DiscardUnknown() {
	xxx_messageInfo_Payload.DiscardUnknown(m)
}

var xxx_messageInfo_Payload proto.InternalMessageInfo

func (m *Payload) GetPassword() []byte {
	if m != nil {
		return m.Password
	}
	return nil
}

type Void struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_b21642789e59141a, []int{1}
}

func (m *Void) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Void.Unmarshal(m, b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Void.Marshal(b, m, deterministic)
}
func (m *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(m, src)
}
func (m *Void) XXX_Size() int {
	return xxx_messageInfo_Void.Size(m)
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Payload)(nil), "stashproto.Payload")
	proto.RegisterType((*Void)(nil), "stashproto.Void")
}

func init() { proto.RegisterFile("stash.proto", fileDescriptor_b21642789e59141a) }

var fileDescriptor_b21642789e59141a = []byte{
	// 131 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x2e, 0x49, 0x2c,
	0xce, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x02, 0x73, 0xc0, 0x6c, 0x25, 0x55, 0x2e,
	0xf6, 0x80, 0xc4, 0xca, 0x9c, 0xfc, 0xc4, 0x14, 0x21, 0x29, 0x2e, 0x8e, 0x82, 0xc4, 0xe2, 0xe2,
	0xf2, 0xfc, 0xa2, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x9e, 0x20, 0x38, 0x5f, 0x89, 0x8d, 0x8b,
	0x25, 0x2c, 0x3f, 0x33, 0xc5, 0x28, 0x9d, 0x8b, 0x35, 0x18, 0xa4, 0x59, 0x48, 0x8f, 0x8b, 0xd9,
	0x3d, 0xb5, 0x44, 0x48, 0x40, 0x0f, 0x61, 0x96, 0x1e, 0x48, 0x85, 0x94, 0x30, 0xb2, 0x08, 0xd4,
	0x68, 0x25, 0x06, 0x90, 0xfa, 0xe0, 0xd4, 0x12, 0x21, 0x6c, 0xb2, 0x52, 0x18, 0x86, 0x28, 0x31,
	0x24, 0xb1, 0x81, 0x79, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x86, 0xa6, 0x2d, 0xc6, 0xb9,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StashClient is the client API for Stash service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StashClient interface {
	Get(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Payload, error)
	Set(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*Void, error)
}

type stashClient struct {
	cc *grpc.ClientConn
}

func NewStashClient(cc *grpc.ClientConn) StashClient {
	return &stashClient{cc}
}

func (c *stashClient) Get(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Payload, error) {
	out := new(Payload)
	err := c.cc.Invoke(ctx, "/stashproto.Stash/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stashClient) Set(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/stashproto.Stash/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StashServer is the server API for Stash service.
type StashServer interface {
	Get(context.Context, *Void) (*Payload, error)
	Set(context.Context, *Payload) (*Void, error)
}

func RegisterStashServer(s *grpc.Server, srv StashServer) {
	s.RegisterService(&_Stash_serviceDesc, srv)
}

func _Stash_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StashServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stashproto.Stash/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StashServer).Get(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stash_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StashServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stashproto.Stash/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StashServer).Set(ctx, req.(*Payload))
	}
	return interceptor(ctx, in, info, handler)
}

var _Stash_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stashproto.Stash",
	HandlerType: (*StashServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Stash_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Stash_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stash.proto",
}
